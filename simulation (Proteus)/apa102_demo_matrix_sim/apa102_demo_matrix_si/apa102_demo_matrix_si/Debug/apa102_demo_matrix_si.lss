
apa102_demo_matrix_si.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000388  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019a8  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a6c  00000000  00000000  00001ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000823  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000224  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e3  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c30  00000000  00000000  00003a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  78:	0c 94 c2 01 	jmp	0x384	; 0x384 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_ZN11APALEDArrayC1Ev>:
void APALEDArray::setLED(uint8_t x, uint8_t y, uint8_t R, uint8_t G, uint8_t B, uint8_t brightness) {
	pixels[x][y][0] = 224 + brightness;
	pixels[x][y][1] = B;
	pixels[x][y][2] = G;
	pixels[x][y][3] = R;
}
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	ec 01       	movw	r28, r24
  86:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN3SPI7SPIinitEv>
  8a:	fe 01       	movw	r30, r28
  8c:	ae 01       	movw	r20, r28
  8e:	53 95       	inc	r21
  90:	90 ee       	ldi	r25, 0xE0	; 224
  92:	9f 01       	movw	r18, r30
  94:	20 5e       	subi	r18, 0xE0	; 224
  96:	3f 4f       	sbci	r19, 0xFF	; 255
  98:	90 83       	st	Z, r25
  9a:	11 82       	std	Z+1, r1	; 0x01
  9c:	12 82       	std	Z+2, r1	; 0x02
  9e:	13 82       	std	Z+3, r1	; 0x03
  a0:	34 96       	adiw	r30, 0x04	; 4
  a2:	e2 17       	cp	r30, r18
  a4:	f3 07       	cpc	r31, r19
  a6:	c1 f7       	brne	.-16     	; 0x98 <_ZN11APALEDArrayC1Ev+0x18>
  a8:	f9 01       	movw	r30, r18
  aa:	42 17       	cp	r20, r18
  ac:	53 07       	cpc	r21, r19
  ae:	89 f7       	brne	.-30     	; 0x92 <_ZN11APALEDArrayC1Ev+0x12>
  b0:	df 91       	pop	r29
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <_ZN11APALEDArray11setLEDcolorEhhhhh>:

void APALEDArray::setLEDcolor(uint8_t x, uint8_t y, uint8_t R, uint8_t G, uint8_t B) {
  b6:	ef 92       	push	r14
  b8:	0f 93       	push	r16
	pixels[x][y][1] = B;
  ba:	e4 2f       	mov	r30, r20
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	38 e0       	ldi	r19, 0x08	; 8
  c0:	63 9f       	mul	r22, r19
  c2:	e0 0d       	add	r30, r0
  c4:	f1 1d       	adc	r31, r1
  c6:	11 24       	eor	r1, r1
  c8:	ee 0f       	add	r30, r30
  ca:	ff 1f       	adc	r31, r31
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	e8 0f       	add	r30, r24
  d2:	f9 1f       	adc	r31, r25
  d4:	e1 82       	std	Z+1, r14	; 0x01
	pixels[x][y][2] = G;
  d6:	02 83       	std	Z+2, r16	; 0x02
	pixels[x][y][3] = R;
  d8:	23 83       	std	Z+3, r18	; 0x03
}
  da:	0f 91       	pop	r16
  dc:	ef 90       	pop	r14
  de:	08 95       	ret

000000e0 <_ZN11APALEDArray16setLEDbrightnessEhhh>:

void APALEDArray::setLEDbrightness(uint8_t x, uint8_t y, uint8_t brightness) {
	pixels[x][y][0] = 224 + brightness;
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	38 e0       	ldi	r19, 0x08	; 8
  e4:	63 9f       	mul	r22, r19
  e6:	40 0d       	add	r20, r0
  e8:	51 1d       	adc	r21, r1
  ea:	11 24       	eor	r1, r1
  ec:	44 0f       	add	r20, r20
  ee:	55 1f       	adc	r21, r21
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	84 0f       	add	r24, r20
  f6:	95 1f       	adc	r25, r21
  f8:	20 52       	subi	r18, 0x20	; 32
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
  fe:	08 95       	ret

00000100 <_ZN11APALEDArray7refreshEv>:
}

void APALEDArray::refresh() {
 100:	af 92       	push	r10
 102:	bf 92       	push	r11
 104:	cf 92       	push	r12
 106:	df 92       	push	r13
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	5c 01       	movw	r10, r24
	for (uint8_t i = 0; i < 4; i++) {
		SPI::SPIsend(0);
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN3SPI7SPIsendEh>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN3SPI7SPIsendEh>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN3SPI7SPIsendEh>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN3SPI7SPIsendEh>
 12e:	65 01       	movw	r12, r10
 130:	b3 94       	inc	r11

void APALEDArray::setLEDbrightness(uint8_t x, uint8_t y, uint8_t brightness) {
	pixels[x][y][0] = 224 + brightness;
}

void APALEDArray::refresh() {
 132:	76 01       	movw	r14, r12
 134:	d8 e0       	ldi	r29, 0x08	; 8
 136:	87 01       	movw	r16, r14
 138:	c4 e0       	ldi	r28, 0x04	; 4
		SPI::SPIsend(0);
	}
	for (uint8_t i = 0; i < LEDArrayX; i++) {
		for (uint8_t j = 0; j < LEDArrayY; j++) {
			for (uint8_t k = 0; k < 4; k++) {
				SPI::SPIsend(pixels[i][j][k]);
 13a:	f8 01       	movw	r30, r16
 13c:	81 91       	ld	r24, Z+
 13e:	8f 01       	movw	r16, r30
 140:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN3SPI7SPIsendEh>
 144:	c1 50       	subi	r28, 0x01	; 1
	for (uint8_t i = 0; i < 4; i++) {
		SPI::SPIsend(0);
	}
	for (uint8_t i = 0; i < LEDArrayX; i++) {
		for (uint8_t j = 0; j < LEDArrayY; j++) {
			for (uint8_t k = 0; k < 4; k++) {
 146:	c9 f7       	brne	.-14     	; 0x13a <_ZN11APALEDArray7refreshEv+0x3a>
 148:	d1 50       	subi	r29, 0x01	; 1
 14a:	f4 e0       	ldi	r31, 0x04	; 4
 14c:	ef 0e       	add	r14, r31
 14e:	f1 1c       	adc	r15, r1
void APALEDArray::refresh() {
	for (uint8_t i = 0; i < 4; i++) {
		SPI::SPIsend(0);
	}
	for (uint8_t i = 0; i < LEDArrayX; i++) {
		for (uint8_t j = 0; j < LEDArrayY; j++) {
 150:	d1 11       	cpse	r29, r1
 152:	f1 cf       	rjmp	.-30     	; 0x136 <_ZN11APALEDArray7refreshEv+0x36>
 154:	80 e2       	ldi	r24, 0x20	; 32
 156:	c8 0e       	add	r12, r24
 158:	d1 1c       	adc	r13, r1

void APALEDArray::refresh() {
	for (uint8_t i = 0; i < 4; i++) {
		SPI::SPIsend(0);
	}
	for (uint8_t i = 0; i < LEDArrayX; i++) {
 15a:	ac 14       	cp	r10, r12
 15c:	bd 04       	cpc	r11, r13
 15e:	49 f7       	brne	.-46     	; 0x132 <_ZN11APALEDArray7refreshEv+0x32>
				SPI::SPIsend(pixels[i][j][k]);
			}
		}
	}
	for (uint8_t i = 0; i < 4; i++) {
		SPI::SPIsend(0);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN3SPI7SPIsendEh>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN3SPI7SPIsendEh>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN3SPI7SPIsendEh>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN3SPI7SPIsendEh>
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	df 90       	pop	r13
 186:	cf 90       	pop	r12
 188:	bf 90       	pop	r11
 18a:	af 90       	pop	r10
 18c:	08 95       	ret

0000018e <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "APA102.h"

int main() {
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	da 95       	dec	r29
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
	APALEDArray matrix;
 1a2:	ce 01       	movw	r24, r28
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	0e 94 40 00 	call	0x80	; 0x80 <_ZN11APALEDArrayC1Ev>
	matrix.refresh();
 1aa:	ce 01       	movw	r24, r28
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	0e 94 80 00 	call	0x100	; 0x100 <_ZN11APALEDArray7refreshEv>
	
	while(1) {
		// DANISH FLAG
		for (uint8_t i = 0; i < 8; i++) {
			for (uint8_t k = 0; k < 8; k++) {
				matrix.setLEDcolor(i, k, 255, 0, 0);
 1b2:	ce 01       	movw	r24, r28
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	5c 01       	movw	r10, r24
		}
		// fade in
		for (uint8_t i = 22; i < 31; i++) {
			for (uint8_t j = 0; j < 8; j++) {
				for (uint8_t k = 0; k < 8; k++) {
					matrix.setLEDbrightness(j, k, i);
 1b8:	d8 2e       	mov	r13, r24
 1ba:	fb 2c       	mov	r15, r11
	APALEDArray matrix;
	matrix.refresh();
	
	while(1) {
		// DANISH FLAG
		for (uint8_t i = 0; i < 8; i++) {
 1bc:	c1 2c       	mov	r12, r1
 1be:	10 e0       	ldi	r17, 0x00	; 0
			for (uint8_t k = 0; k < 8; k++) {
				matrix.setLEDcolor(i, k, 255, 0, 0);
 1c0:	e1 2c       	mov	r14, r1
 1c2:	00 e0       	ldi	r16, 0x00	; 0
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	41 2f       	mov	r20, r17
 1c8:	6c 2d       	mov	r22, r12
 1ca:	c5 01       	movw	r24, r10
 1cc:	0e 94 5b 00 	call	0xb6	; 0xb6 <_ZN11APALEDArray11setLEDcolorEhhhhh>
	matrix.refresh();
	
	while(1) {
		// DANISH FLAG
		for (uint8_t i = 0; i < 8; i++) {
			for (uint8_t k = 0; k < 8; k++) {
 1d0:	1f 5f       	subi	r17, 0xFF	; 255
 1d2:	18 30       	cpi	r17, 0x08	; 8
 1d4:	a9 f7       	brne	.-22     	; 0x1c0 <main+0x32>
	APALEDArray matrix;
	matrix.refresh();
	
	while(1) {
		// DANISH FLAG
		for (uint8_t i = 0; i < 8; i++) {
 1d6:	c3 94       	inc	r12
 1d8:	98 e0       	ldi	r25, 0x08	; 8
 1da:	c9 12       	cpse	r12, r25
 1dc:	f0 cf       	rjmp	.-32     	; 0x1be <main+0x30>
 1de:	0f 2e       	mov	r0, r31
 1e0:	f3 e0       	ldi	r31, 0x03	; 3
 1e2:	cf 2e       	mov	r12, r31
 1e4:	f0 2d       	mov	r31, r0
 1e6:	10 e0       	ldi	r17, 0x00	; 0
				matrix.setLEDcolor(i, k, 255, 0, 0);
			}
		}
		for (uint8_t i = 3; i < 5; i++) {
			for (uint8_t j = 0; j < 8; j++) {
				matrix.setLEDcolor(i, j, 255, 255, 255);
 1e8:	ee 24       	eor	r14, r14
 1ea:	ea 94       	dec	r14
 1ec:	0f ef       	ldi	r16, 0xFF	; 255
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	41 2f       	mov	r20, r17
 1f2:	6c 2d       	mov	r22, r12
 1f4:	c5 01       	movw	r24, r10
 1f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <_ZN11APALEDArray11setLEDcolorEhhhhh>
				matrix.setLEDcolor(j, i, 255, 255, 255);
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	4c 2d       	mov	r20, r12
 1fe:	61 2f       	mov	r22, r17
 200:	c5 01       	movw	r24, r10
 202:	0e 94 5b 00 	call	0xb6	; 0xb6 <_ZN11APALEDArray11setLEDcolorEhhhhh>
			for (uint8_t k = 0; k < 8; k++) {
				matrix.setLEDcolor(i, k, 255, 0, 0);
			}
		}
		for (uint8_t i = 3; i < 5; i++) {
			for (uint8_t j = 0; j < 8; j++) {
 206:	1f 5f       	subi	r17, 0xFF	; 255
 208:	18 30       	cpi	r17, 0x08	; 8
 20a:	71 f7       	brne	.-36     	; 0x1e8 <main+0x5a>
		for (uint8_t i = 0; i < 8; i++) {
			for (uint8_t k = 0; k < 8; k++) {
				matrix.setLEDcolor(i, k, 255, 0, 0);
			}
		}
		for (uint8_t i = 3; i < 5; i++) {
 20c:	c3 94       	inc	r12
 20e:	85 e0       	ldi	r24, 0x05	; 5
 210:	c8 12       	cpse	r12, r24
 212:	e9 cf       	rjmp	.-46     	; 0x1e6 <main+0x58>
 214:	0f 2e       	mov	r0, r31
 216:	f6 e1       	ldi	r31, 0x16	; 22
 218:	ef 2e       	mov	r14, r31
 21a:	f0 2d       	mov	r31, r0
 21c:	00 e0       	ldi	r16, 0x00	; 0
 21e:	10 e0       	ldi	r17, 0x00	; 0
		}
		// fade in
		for (uint8_t i = 22; i < 31; i++) {
			for (uint8_t j = 0; j < 8; j++) {
				for (uint8_t k = 0; k < 8; k++) {
					matrix.setLEDbrightness(j, k, i);
 220:	2e 2d       	mov	r18, r14
 222:	41 2f       	mov	r20, r17
 224:	60 2f       	mov	r22, r16
 226:	8d 2d       	mov	r24, r13
 228:	9f 2d       	mov	r25, r15
 22a:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN11APALEDArray16setLEDbrightnessEhhh>
			}
		}
		// fade in
		for (uint8_t i = 22; i < 31; i++) {
			for (uint8_t j = 0; j < 8; j++) {
				for (uint8_t k = 0; k < 8; k++) {
 22e:	1f 5f       	subi	r17, 0xFF	; 255
 230:	18 30       	cpi	r17, 0x08	; 8
 232:	b1 f7       	brne	.-20     	; 0x220 <main+0x92>
				matrix.setLEDcolor(j, i, 255, 255, 255);
			}
		}
		// fade in
		for (uint8_t i = 22; i < 31; i++) {
			for (uint8_t j = 0; j < 8; j++) {
 234:	0f 5f       	subi	r16, 0xFF	; 255
 236:	08 30       	cpi	r16, 0x08	; 8
 238:	91 f7       	brne	.-28     	; 0x21e <main+0x90>
				for (uint8_t k = 0; k < 8; k++) {
					matrix.setLEDbrightness(j, k, i);
				}
			}
			matrix.refresh();
 23a:	c5 01       	movw	r24, r10
 23c:	0e 94 80 00 	call	0x100	; 0x100 <_ZN11APALEDArray7refreshEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	8f e3       	ldi	r24, 0x3F	; 63
 242:	9c e9       	ldi	r25, 0x9C	; 156
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0xb6>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0xbc>
 24a:	00 00       	nop
				matrix.setLEDcolor(i, j, 255, 255, 255);
				matrix.setLEDcolor(j, i, 255, 255, 255);
			}
		}
		// fade in
		for (uint8_t i = 22; i < 31; i++) {
 24c:	e3 94       	inc	r14
 24e:	9f e1       	ldi	r25, 0x1F	; 31
 250:	e9 12       	cpse	r14, r25
 252:	e4 cf       	rjmp	.-56     	; 0x21c <main+0x8e>
 254:	0f 2e       	mov	r0, r31
 256:	ff e1       	ldi	r31, 0x1F	; 31
 258:	ef 2e       	mov	r14, r31
 25a:	f0 2d       	mov	r31, r0
 25c:	00 e0       	ldi	r16, 0x00	; 0
 25e:	10 e0       	ldi	r17, 0x00	; 0
		}
		// fade out
		for (uint8_t i = 31; i > 22; i--) {
			for (uint8_t j = 0; j < 8; j++) {
				for (uint8_t k = 0; k < 8; k++) {
					matrix.setLEDbrightness(j, k, i);
 260:	2e 2d       	mov	r18, r14
 262:	41 2f       	mov	r20, r17
 264:	60 2f       	mov	r22, r16
 266:	8d 2d       	mov	r24, r13
 268:	9f 2d       	mov	r25, r15
 26a:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN11APALEDArray16setLEDbrightnessEhhh>
			_delay_ms(10);
		}
		// fade out
		for (uint8_t i = 31; i > 22; i--) {
			for (uint8_t j = 0; j < 8; j++) {
				for (uint8_t k = 0; k < 8; k++) {
 26e:	1f 5f       	subi	r17, 0xFF	; 255
 270:	18 30       	cpi	r17, 0x08	; 8
 272:	b1 f7       	brne	.-20     	; 0x260 <main+0xd2>
			matrix.refresh();
			_delay_ms(10);
		}
		// fade out
		for (uint8_t i = 31; i > 22; i--) {
			for (uint8_t j = 0; j < 8; j++) {
 274:	0f 5f       	subi	r16, 0xFF	; 255
 276:	08 30       	cpi	r16, 0x08	; 8
 278:	91 f7       	brne	.-28     	; 0x25e <main+0xd0>
				for (uint8_t k = 0; k < 8; k++) {
					matrix.setLEDbrightness(j, k, i);
				}
			}
			matrix.refresh();
 27a:	c5 01       	movw	r24, r10
 27c:	0e 94 80 00 	call	0x100	; 0x100 <_ZN11APALEDArray7refreshEv>
 280:	8f e3       	ldi	r24, 0x3F	; 63
 282:	9c e9       	ldi	r25, 0x9C	; 156
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0xf6>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0xfc>
 28a:	00 00       	nop
			}
			matrix.refresh();
			_delay_ms(10);
		}
		// fade out
		for (uint8_t i = 31; i > 22; i--) {
 28c:	ea 94       	dec	r14
 28e:	96 e1       	ldi	r25, 0x16	; 22
 290:	e9 12       	cpse	r14, r25
 292:	e4 cf       	rjmp	.-56     	; 0x25c <main+0xce>
 294:	c1 2c       	mov	r12, r1
 296:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(10);
		}
		// SWEDISH FLAG
		for (uint8_t i = 0; i < 8; i++) {
			for (uint8_t k = 0; k < 8; k++) {
				matrix.setLEDcolor(i, k, 0, 0, 255);
 298:	ee 24       	eor	r14, r14
 29a:	ea 94       	dec	r14
 29c:	00 e0       	ldi	r16, 0x00	; 0
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	41 2f       	mov	r20, r17
 2a2:	6c 2d       	mov	r22, r12
 2a4:	c5 01       	movw	r24, r10
 2a6:	0e 94 5b 00 	call	0xb6	; 0xb6 <_ZN11APALEDArray11setLEDcolorEhhhhh>
			matrix.refresh();
			_delay_ms(10);
		}
		// SWEDISH FLAG
		for (uint8_t i = 0; i < 8; i++) {
			for (uint8_t k = 0; k < 8; k++) {
 2aa:	1f 5f       	subi	r17, 0xFF	; 255
 2ac:	18 30       	cpi	r17, 0x08	; 8
 2ae:	a1 f7       	brne	.-24     	; 0x298 <main+0x10a>
			}
			matrix.refresh();
			_delay_ms(10);
		}
		// SWEDISH FLAG
		for (uint8_t i = 0; i < 8; i++) {
 2b0:	c3 94       	inc	r12
 2b2:	88 e0       	ldi	r24, 0x08	; 8
 2b4:	c8 12       	cpse	r12, r24
 2b6:	ef cf       	rjmp	.-34     	; 0x296 <main+0x108>
 2b8:	0f 2e       	mov	r0, r31
 2ba:	f3 e0       	ldi	r31, 0x03	; 3
 2bc:	cf 2e       	mov	r12, r31
 2be:	f0 2d       	mov	r31, r0
 2c0:	10 e0       	ldi	r17, 0x00	; 0
				matrix.setLEDcolor(i, k, 0, 0, 255);
			}
		}
		for (uint8_t i = 3; i < 5; i++) {
			for (uint8_t j = 0; j < 8; j++) {
				matrix.setLEDcolor(i, j, 255, 255, 0);
 2c2:	e1 2c       	mov	r14, r1
 2c4:	0f ef       	ldi	r16, 0xFF	; 255
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	41 2f       	mov	r20, r17
 2ca:	6c 2d       	mov	r22, r12
 2cc:	c5 01       	movw	r24, r10
 2ce:	0e 94 5b 00 	call	0xb6	; 0xb6 <_ZN11APALEDArray11setLEDcolorEhhhhh>
				matrix.setLEDcolor(j, i, 255, 255, 0);
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	4c 2d       	mov	r20, r12
 2d6:	61 2f       	mov	r22, r17
 2d8:	c5 01       	movw	r24, r10
 2da:	0e 94 5b 00 	call	0xb6	; 0xb6 <_ZN11APALEDArray11setLEDcolorEhhhhh>
			for (uint8_t k = 0; k < 8; k++) {
				matrix.setLEDcolor(i, k, 0, 0, 255);
			}
		}
		for (uint8_t i = 3; i < 5; i++) {
			for (uint8_t j = 0; j < 8; j++) {
 2de:	1f 5f       	subi	r17, 0xFF	; 255
 2e0:	18 30       	cpi	r17, 0x08	; 8
 2e2:	79 f7       	brne	.-34     	; 0x2c2 <main+0x134>
		for (uint8_t i = 0; i < 8; i++) {
			for (uint8_t k = 0; k < 8; k++) {
				matrix.setLEDcolor(i, k, 0, 0, 255);
			}
		}
		for (uint8_t i = 3; i < 5; i++) {
 2e4:	c3 94       	inc	r12
 2e6:	95 e0       	ldi	r25, 0x05	; 5
 2e8:	c9 12       	cpse	r12, r25
 2ea:	ea cf       	rjmp	.-44     	; 0x2c0 <main+0x132>
 2ec:	0f 2e       	mov	r0, r31
 2ee:	f6 e1       	ldi	r31, 0x16	; 22
 2f0:	ef 2e       	mov	r14, r31
 2f2:	f0 2d       	mov	r31, r0
 2f4:	00 e0       	ldi	r16, 0x00	; 0
 2f6:	10 e0       	ldi	r17, 0x00	; 0
		}
		// fade in
		for (uint8_t i = 22; i < 31; i++) {
			for (uint8_t j = 0; j < 8; j++) {
				for (uint8_t k = 0; k < 8; k++) {
					matrix.setLEDbrightness(j, k, i);
 2f8:	2e 2d       	mov	r18, r14
 2fa:	41 2f       	mov	r20, r17
 2fc:	60 2f       	mov	r22, r16
 2fe:	8d 2d       	mov	r24, r13
 300:	9f 2d       	mov	r25, r15
 302:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN11APALEDArray16setLEDbrightnessEhhh>
			}
		}
		// fade in
		for (uint8_t i = 22; i < 31; i++) {
			for (uint8_t j = 0; j < 8; j++) {
				for (uint8_t k = 0; k < 8; k++) {
 306:	1f 5f       	subi	r17, 0xFF	; 255
 308:	18 30       	cpi	r17, 0x08	; 8
 30a:	b1 f7       	brne	.-20     	; 0x2f8 <main+0x16a>
				matrix.setLEDcolor(j, i, 255, 255, 0);
			}
		}
		// fade in
		for (uint8_t i = 22; i < 31; i++) {
			for (uint8_t j = 0; j < 8; j++) {
 30c:	0f 5f       	subi	r16, 0xFF	; 255
 30e:	08 30       	cpi	r16, 0x08	; 8
 310:	91 f7       	brne	.-28     	; 0x2f6 <main+0x168>
				for (uint8_t k = 0; k < 8; k++) {
					matrix.setLEDbrightness(j, k, i);
				}
			}
			matrix.refresh();
 312:	c5 01       	movw	r24, r10
 314:	0e 94 80 00 	call	0x100	; 0x100 <_ZN11APALEDArray7refreshEv>
 318:	8f e3       	ldi	r24, 0x3F	; 63
 31a:	9c e9       	ldi	r25, 0x9C	; 156
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <main+0x18e>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0x194>
 322:	00 00       	nop
				matrix.setLEDcolor(i, j, 255, 255, 0);
				matrix.setLEDcolor(j, i, 255, 255, 0);
			}
		}
		// fade in
		for (uint8_t i = 22; i < 31; i++) {
 324:	e3 94       	inc	r14
 326:	9f e1       	ldi	r25, 0x1F	; 31
 328:	e9 12       	cpse	r14, r25
 32a:	e4 cf       	rjmp	.-56     	; 0x2f4 <main+0x166>
 32c:	0f 2e       	mov	r0, r31
 32e:	ff e1       	ldi	r31, 0x1F	; 31
 330:	ef 2e       	mov	r14, r31
 332:	f0 2d       	mov	r31, r0
 334:	00 e0       	ldi	r16, 0x00	; 0
 336:	10 e0       	ldi	r17, 0x00	; 0
		}
		// fade out
		for (uint8_t i = 31; i > 22; i--) {
			for (uint8_t j = 0; j < 8; j++) {
				for (uint8_t k = 0; k < 8; k++) {
					matrix.setLEDbrightness(j, k, i);
 338:	2e 2d       	mov	r18, r14
 33a:	41 2f       	mov	r20, r17
 33c:	60 2f       	mov	r22, r16
 33e:	8d 2d       	mov	r24, r13
 340:	9f 2d       	mov	r25, r15
 342:	0e 94 70 00 	call	0xe0	; 0xe0 <_ZN11APALEDArray16setLEDbrightnessEhhh>
			_delay_ms(10);
		}
		// fade out
		for (uint8_t i = 31; i > 22; i--) {
			for (uint8_t j = 0; j < 8; j++) {
				for (uint8_t k = 0; k < 8; k++) {
 346:	1f 5f       	subi	r17, 0xFF	; 255
 348:	18 30       	cpi	r17, 0x08	; 8
 34a:	b1 f7       	brne	.-20     	; 0x338 <main+0x1aa>
			matrix.refresh();
			_delay_ms(10);
		}
		// fade out
		for (uint8_t i = 31; i > 22; i--) {
			for (uint8_t j = 0; j < 8; j++) {
 34c:	0f 5f       	subi	r16, 0xFF	; 255
 34e:	08 30       	cpi	r16, 0x08	; 8
 350:	91 f7       	brne	.-28     	; 0x336 <main+0x1a8>
				for (uint8_t k = 0; k < 8; k++) {
					matrix.setLEDbrightness(j, k, i);
				}
			}
			matrix.refresh();
 352:	c5 01       	movw	r24, r10
 354:	0e 94 80 00 	call	0x100	; 0x100 <_ZN11APALEDArray7refreshEv>
 358:	8f e3       	ldi	r24, 0x3F	; 63
 35a:	9c e9       	ldi	r25, 0x9C	; 156
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <main+0x1ce>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x1d4>
 362:	00 00       	nop
			}
			matrix.refresh();
			_delay_ms(10);
		}
		// fade out
		for (uint8_t i = 31; i > 22; i--) {
 364:	ea 94       	dec	r14
 366:	96 e1       	ldi	r25, 0x16	; 22
 368:	e9 12       	cpse	r14, r25
 36a:	e4 cf       	rjmp	.-56     	; 0x334 <main+0x1a6>
 36c:	27 cf       	rjmp	.-434    	; 0x1bc <main+0x2e>

0000036e <_ZN3SPI7SPIinitEv>:

#include "SPI.h"

void SPI::SPIinit() {
	// Set MOSI, SCK, SS as Output
	DDRB |= (1 << PB5) | (1 << PB3) | (1 << PB2);
 36e:	84 b1       	in	r24, 0x04	; 4
 370:	8c 62       	ori	r24, 0x2C	; 44
 372:	84 b9       	out	0x04, r24	; 4
	
	// Enable SPI, Set as Master, Prescaler: Fosc/16
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 374:	81 e5       	ldi	r24, 0x51	; 81
 376:	8c bd       	out	0x2c, r24	; 44
 378:	08 95       	ret

0000037a <_ZN3SPI7SPIsendEh>:
}

void SPI::SPIsend(uint8_t data) {
	// Load data into the buffer
	SPDR = data;
 37a:	8e bd       	out	0x2e, r24	; 46
	
	// Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 37c:	0d b4       	in	r0, 0x2d	; 45
 37e:	07 fe       	sbrs	r0, 7
 380:	fd cf       	rjmp	.-6      	; 0x37c <_ZN3SPI7SPIsendEh+0x2>
 382:	08 95       	ret

00000384 <_exit>:
 384:	f8 94       	cli

00000386 <__stop_program>:
 386:	ff cf       	rjmp	.-2      	; 0x386 <__stop_program>
