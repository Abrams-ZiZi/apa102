
apa102_demo_led_sim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000166a  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a4d  00000000  00000000  000019ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006da  00000000  00000000  000023fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00002ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006dc  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009ae  00000000  00000000  000033d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003d82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  78:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_ZN6APALEDC1Eh>:
	this->G = G;
	this->B = B;
}

void APALED::setLEDBrightness(uint8_t brightness) {
	this->brightness = 224 + brightness;
  80:	61 11       	cpse	r22, r1
  82:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN3SPI7SPIinitEv>
  86:	08 95       	ret

00000088 <_ZN6APALED6setLEDEhhhh>:
  88:	0f 93       	push	r16
  8a:	fc 01       	movw	r30, r24
  8c:	61 83       	std	Z+1, r22	; 0x01
  8e:	42 83       	std	Z+2, r20	; 0x02
  90:	23 83       	std	Z+3, r18	; 0x03
  92:	00 52       	subi	r16, 0x20	; 32
  94:	04 83       	std	Z+4, r16	; 0x04
  96:	0f 91       	pop	r16
  98:	08 95       	ret

0000009a <_ZN6APALED7refreshEv>:
}

void APALED::refresh() {
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
	for (int i = 0; i < 4; i++) {
		SPI::SPIsend(0);
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN3SPI7SPIsendEh>
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN3SPI7SPIsendEh>
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN3SPI7SPIsendEh>
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN3SPI7SPIsendEh>
	}
	SPI::SPIsend(224+this->brightness);
  b8:	8c 81       	ldd	r24, Y+4	; 0x04
  ba:	80 52       	subi	r24, 0x20	; 32
  bc:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN3SPI7SPIsendEh>
	SPI::SPIsend(this->B);
  c0:	8b 81       	ldd	r24, Y+3	; 0x03
  c2:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN3SPI7SPIsendEh>
	SPI::SPIsend(this->G);
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN3SPI7SPIsendEh>
	SPI::SPIsend(this->R);
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN3SPI7SPIsendEh>
	for (int i = 0; i < 4; i++) {
		SPI::SPIsend(0);
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN3SPI7SPIsendEh>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN3SPI7SPIsendEh>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN3SPI7SPIsendEh>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	0e 94 cc 00 	call	0x198	; 0x198 <_ZN3SPI7SPIsendEh>
	}
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "APA102.h"

int main() {
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	00 d0       	rcall	.+0      	; 0xf6 <main+0x6>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <main+0x8>
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	APALED rgbled;
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	ce 01       	movw	r24, r28
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	0e 94 40 00 	call	0x80	; 0x80 <_ZN6APALEDC1Eh>
	rgbled.refresh();
 108:	ce 01       	movw	r24, r28
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	0e 94 4d 00 	call	0x9a	; 0x9a <_ZN6APALED7refreshEv>
	
	while(1) {
		rgbled.setLED(255, 0, 0, 31);
 110:	0f e1       	ldi	r16, 0x1F	; 31
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	6f ef       	ldi	r22, 0xFF	; 255
 118:	ce 01       	movw	r24, r28
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 44 00 	call	0x88	; 0x88 <_ZN6APALED6setLEDEhhhh>
		rgbled.refresh();
 120:	ce 01       	movw	r24, r28
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	0e 94 4d 00 	call	0x9a	; 0x9a <_ZN6APALED7refreshEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	80 e7       	ldi	r24, 0x70	; 112
 12c:	92 e0       	ldi	r25, 0x02	; 2
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x3e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x48>
 138:	00 00       	nop
		_delay_ms(50);
		rgbled.setLED(0, 255, 0, 31);
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	4f ef       	ldi	r20, 0xFF	; 255
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	ce 01       	movw	r24, r28
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	0e 94 44 00 	call	0x88	; 0x88 <_ZN6APALED6setLEDEhhhh>
		rgbled.refresh();
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	0e 94 4d 00 	call	0x9a	; 0x9a <_ZN6APALED7refreshEv>
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	80 e7       	ldi	r24, 0x70	; 112
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x66>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x70>
 160:	00 00       	nop
		_delay_ms(50);
		rgbled.setLED(0, 0, 255, 31);
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	0e 94 44 00 	call	0x88	; 0x88 <_ZN6APALED6setLEDEhhhh>
		rgbled.refresh();
 170:	ce 01       	movw	r24, r28
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	0e 94 4d 00 	call	0x9a	; 0x9a <_ZN6APALED7refreshEv>
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	80 e7       	ldi	r24, 0x70	; 112
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x8e>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x98>
 188:	00 00       	nop
 18a:	c2 cf       	rjmp	.-124    	; 0x110 <main+0x20>

0000018c <_ZN3SPI7SPIinitEv>:

#include "SPI.h"

void SPI::SPIinit() {
	// Set MOSI, SCK, SS as Output
	DDRB |= (1 << PB5) | (1 << PB3) | (1 << PB2);
 18c:	84 b1       	in	r24, 0x04	; 4
 18e:	8c 62       	ori	r24, 0x2C	; 44
 190:	84 b9       	out	0x04, r24	; 4
	
	// Enable SPI, Set as Master, Prescaler: Fosc/16
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 192:	81 e5       	ldi	r24, 0x51	; 81
 194:	8c bd       	out	0x2c, r24	; 44
 196:	08 95       	ret

00000198 <_ZN3SPI7SPIsendEh>:
}

void SPI::SPIsend(uint8_t data) {
	// Load data into the buffer
	SPDR = data;
 198:	8e bd       	out	0x2e, r24	; 46
	
	// Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 19a:	0d b4       	in	r0, 0x2d	; 45
 19c:	07 fe       	sbrs	r0, 7
 19e:	fd cf       	rjmp	.-6      	; 0x19a <_ZN3SPI7SPIsendEh+0x2>
 1a0:	08 95       	ret

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
