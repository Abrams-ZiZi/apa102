
apa102_demo_strip_sim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a4c  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a4d  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007db  00000000  00000000  00002991  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000224  00000000  00000000  0000316c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e1  00000000  00000000  00003390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b97  00000000  00000000  00003a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00004608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  78:	0c 94 ab 01 	jmp	0x356	; 0x356 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_ZN11APALEDStripC1Ev>:
	leds[x][2] = G;
	leds[x][3] = R;
}

void APALEDStrip::setLEDbrightness(uint8_t x, uint8_t brightness) {
	leds[x][0] = 224 + brightness;
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	ec 01       	movw	r28, r24
  86:	0e 94 a0 01 	call	0x340	; 0x340 <_ZN3SPI7SPIinitEv>
  8a:	fe 01       	movw	r30, r28
  8c:	ce 01       	movw	r24, r28
  8e:	80 51       	subi	r24, 0x10	; 16
  90:	9f 4f       	sbci	r25, 0xFF	; 255
  92:	20 ee       	ldi	r18, 0xE0	; 224
  94:	20 83       	st	Z, r18
  96:	11 82       	std	Z+1, r1	; 0x01
  98:	12 82       	std	Z+2, r1	; 0x02
  9a:	13 82       	std	Z+3, r1	; 0x03
  9c:	34 96       	adiw	r30, 0x04	; 4
  9e:	e8 17       	cp	r30, r24
  a0:	f9 07       	cpc	r31, r25
  a2:	c1 f7       	brne	.-16     	; 0x94 <_ZN11APALEDStripC1Ev+0x14>
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	08 95       	ret

000000aa <_ZN11APALEDStrip6setLEDEhhhhh>:
  aa:	ef 92       	push	r14
  ac:	0f 93       	push	r16
  ae:	fc 01       	movw	r30, r24
  b0:	34 e0       	ldi	r19, 0x04	; 4
  b2:	63 9f       	mul	r22, r19
  b4:	e0 0d       	add	r30, r0
  b6:	f1 1d       	adc	r31, r1
  b8:	11 24       	eor	r1, r1
  ba:	80 ee       	ldi	r24, 0xE0	; 224
  bc:	8e 0d       	add	r24, r14
  be:	80 83       	st	Z, r24
  c0:	01 83       	std	Z+1, r16	; 0x01
  c2:	22 83       	std	Z+2, r18	; 0x02
  c4:	43 83       	std	Z+3, r20	; 0x03
  c6:	0f 91       	pop	r16
  c8:	ef 90       	pop	r14
  ca:	08 95       	ret

000000cc <_ZN11APALEDStrip7refreshEv>:
}

void APALEDStrip::refresh() {
  cc:	cf 92       	push	r12
  ce:	df 92       	push	r13
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	6c 01       	movw	r12, r24
	for (uint8_t i = 0; i < 4; i++) {
		SPI::SPIsend(0);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN3SPI7SPIsendEh>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN3SPI7SPIsendEh>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN3SPI7SPIsendEh>
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN3SPI7SPIsendEh>
  f4:	76 01       	movw	r14, r12
  f6:	80 ef       	ldi	r24, 0xF0	; 240
  f8:	c8 0e       	add	r12, r24
  fa:	d1 1c       	adc	r13, r1

void APALEDStrip::setLEDbrightness(uint8_t x, uint8_t brightness) {
	leds[x][0] = 224 + brightness;
}

void APALEDStrip::refresh() {
  fc:	87 01       	movw	r16, r14
  fe:	c4 e0       	ldi	r28, 0x04	; 4
	for (uint8_t i = 0; i < 4; i++) {
		SPI::SPIsend(0);
	}
	for (uint8_t i = 0; i < LEDStripX; i++) {
		for (uint8_t j = 0; j < 4; j++) {
			SPI::SPIsend(leds[i][j]);
 100:	f8 01       	movw	r30, r16
 102:	81 91       	ld	r24, Z+
 104:	8f 01       	movw	r16, r30
 106:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN3SPI7SPIsendEh>
 10a:	c1 50       	subi	r28, 0x01	; 1
void APALEDStrip::refresh() {
	for (uint8_t i = 0; i < 4; i++) {
		SPI::SPIsend(0);
	}
	for (uint8_t i = 0; i < LEDStripX; i++) {
		for (uint8_t j = 0; j < 4; j++) {
 10c:	c9 f7       	brne	.-14     	; 0x100 <_ZN11APALEDStrip7refreshEv+0x34>
 10e:	f4 e0       	ldi	r31, 0x04	; 4
 110:	ef 0e       	add	r14, r31
 112:	f1 1c       	adc	r15, r1

void APALEDStrip::refresh() {
	for (uint8_t i = 0; i < 4; i++) {
		SPI::SPIsend(0);
	}
	for (uint8_t i = 0; i < LEDStripX; i++) {
 114:	ec 14       	cp	r14, r12
 116:	fd 04       	cpc	r15, r13
 118:	89 f7       	brne	.-30     	; 0xfc <_ZN11APALEDStrip7refreshEv+0x30>
		for (uint8_t j = 0; j < 4; j++) {
			SPI::SPIsend(leds[i][j]);
		}
	}
	for (uint8_t i = 0; i < 4; i++) {
		SPI::SPIsend(0);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN3SPI7SPIsendEh>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN3SPI7SPIsendEh>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN3SPI7SPIsendEh>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN3SPI7SPIsendEh>
	}
}
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	ff 90       	pop	r15
 13a:	ef 90       	pop	r14
 13c:	df 90       	pop	r13
 13e:	cf 90       	pop	r12
 140:	08 95       	ret

00000142 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "APA102.h"

int main() {
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	c0 5f       	subi	r28, 0xF0	; 240
 14c:	d1 09       	sbc	r29, r1
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
	APALEDStrip strip;
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	0e 94 40 00 	call	0x80	; 0x80 <_ZN11APALEDStripC1Ev>
	strip.refresh();
 160:	ce 01       	movw	r24, r28
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	0e 94 66 00 	call	0xcc	; 0xcc <_ZN11APALEDStrip7refreshEv>

#include <avr/io.h>
#include <util/delay.h>
#include "APA102.h"

int main() {
 168:	0f 2e       	mov	r0, r31
 16a:	f5 e0       	ldi	r31, 0x05	; 5
 16c:	ff 2e       	mov	r15, r31
 16e:	f0 2d       	mov	r31, r0
 170:	10 e0       	ldi	r17, 0x00	; 0
	strip.refresh();
	
	while(1) {
		for(uint8_t i = 0; i < 5; i++) {
			for (uint8_t j = 0; j < 16; j+=3) {
				strip.setLED(j, 255, 0, 0, 31);
 172:	0f 2e       	mov	r0, r31
 174:	ff e1       	ldi	r31, 0x1F	; 31
 176:	ef 2e       	mov	r14, r31
 178:	f0 2d       	mov	r31, r0
 17a:	00 e0       	ldi	r16, 0x00	; 0
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	4f ef       	ldi	r20, 0xFF	; 255
 180:	61 2f       	mov	r22, r17
 182:	ce 01       	movw	r24, r28
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+1, 0, 255, 0, 31);
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	61 0f       	add	r22, r17
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	ce 01       	movw	r24, r28
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+2, 0, 0, 255, 31);
 19a:	62 e0       	ldi	r22, 0x02	; 2
 19c:	61 0f       	add	r22, r17
 19e:	0f ef       	ldi	r16, 0xFF	; 255
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	ce 01       	movw	r24, r28
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
	APALEDStrip strip;
	strip.refresh();
	
	while(1) {
		for(uint8_t i = 0; i < 5; i++) {
			for (uint8_t j = 0; j < 16; j+=3) {
 1ac:	1d 5f       	subi	r17, 0xFD	; 253
 1ae:	12 31       	cpi	r17, 0x12	; 18
 1b0:	01 f7       	brne	.-64     	; 0x172 <main+0x30>
				strip.setLED(j, 255, 0, 0, 31);
				strip.setLED(j+1, 0, 255, 0, 31);
				strip.setLED(j+2, 0, 0, 255, 31);
			}
			strip.refresh();
 1b2:	ce 01       	movw	r24, r28
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	0e 94 66 00 	call	0xcc	; 0xcc <_ZN11APALEDStrip7refreshEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	89 ef       	ldi	r24, 0xF9	; 249
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x7e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x88>
 1ca:	00 00       	nop
			_delay_ms(20);
			for (uint8_t j = 0; j < 16; j+=3) {
 1cc:	10 e0       	ldi	r17, 0x00	; 0
				strip.setLED(j, 0, 0, 0, 31);
 1ce:	0f 2e       	mov	r0, r31
 1d0:	ff e1       	ldi	r31, 0x1F	; 31
 1d2:	ef 2e       	mov	r14, r31
 1d4:	f0 2d       	mov	r31, r0
 1d6:	00 e0       	ldi	r16, 0x00	; 0
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	61 2f       	mov	r22, r17
 1de:	ce 01       	movw	r24, r28
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+1, 0, 0, 0, 31);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	61 0f       	add	r22, r17
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	ce 01       	movw	r24, r28
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+2, 0, 0, 0, 31);
 1f6:	62 e0       	ldi	r22, 0x02	; 2
 1f8:	61 0f       	add	r22, r17
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	ce 01       	movw	r24, r28
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+1, 0, 255, 0, 31);
				strip.setLED(j+2, 0, 0, 255, 31);
			}
			strip.refresh();
			_delay_ms(20);
			for (uint8_t j = 0; j < 16; j+=3) {
 206:	1d 5f       	subi	r17, 0xFD	; 253
 208:	12 31       	cpi	r17, 0x12	; 18
 20a:	09 f7       	brne	.-62     	; 0x1ce <main+0x8c>
				strip.setLED(j, 0, 0, 0, 31);
				strip.setLED(j+1, 0, 0, 0, 31);
				strip.setLED(j+2, 0, 0, 0, 31);
			}
			strip.refresh();
 20c:	ce 01       	movw	r24, r28
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	0e 94 66 00 	call	0xcc	; 0xcc <_ZN11APALEDStrip7refreshEv>
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	89 ef       	ldi	r24, 0xF9	; 249
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0xd8>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0xe2>
 224:	00 00       	nop
 226:	fa 94       	dec	r15
int main() {
	APALEDStrip strip;
	strip.refresh();
	
	while(1) {
		for(uint8_t i = 0; i < 5; i++) {
 228:	f1 10       	cpse	r15, r1
 22a:	a2 cf       	rjmp	.-188    	; 0x170 <main+0x2e>
 22c:	0f 2e       	mov	r0, r31
 22e:	f7 e0       	ldi	r31, 0x07	; 7
 230:	ff 2e       	mov	r15, r31
 232:	f0 2d       	mov	r31, r0
 234:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(20);
		}
		
		for(uint8_t i = 0; i < 7; i++) {
			for (uint8_t j = 0; j < 16; j+=3) {
				strip.setLED(j, 255, 0, 0, 31);
 236:	0f 2e       	mov	r0, r31
 238:	ff e1       	ldi	r31, 0x1F	; 31
 23a:	ef 2e       	mov	r14, r31
 23c:	f0 2d       	mov	r31, r0
 23e:	00 e0       	ldi	r16, 0x00	; 0
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	4f ef       	ldi	r20, 0xFF	; 255
 244:	61 2f       	mov	r22, r17
 246:	ce 01       	movw	r24, r28
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+1, 0, 255, 0, 31);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	61 0f       	add	r22, r17
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	ce 01       	movw	r24, r28
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+2, 0, 0, 255, 31);
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	61 0f       	add	r22, r17
 262:	0f ef       	ldi	r16, 0xFF	; 255
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	ce 01       	movw	r24, r28
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
			strip.refresh();
			_delay_ms(20);
		}
		
		for(uint8_t i = 0; i < 7; i++) {
			for (uint8_t j = 0; j < 16; j+=3) {
 270:	1d 5f       	subi	r17, 0xFD	; 253
 272:	12 31       	cpi	r17, 0x12	; 18
 274:	01 f7       	brne	.-64     	; 0x236 <main+0xf4>
				strip.setLED(j, 255, 0, 0, 31);
				strip.setLED(j+1, 0, 255, 0, 31);
				strip.setLED(j+2, 0, 0, 255, 31);
			}
			strip.refresh();
 276:	ce 01       	movw	r24, r28
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	0e 94 66 00 	call	0xcc	; 0xcc <_ZN11APALEDStrip7refreshEv>
 27e:	8f e3       	ldi	r24, 0x3F	; 63
 280:	9c e9       	ldi	r25, 0x9C	; 156
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <main+0x140>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x146>
 288:	00 00       	nop
			_delay_ms(10);
			for (uint8_t j = 0; j < 16; j+=3) {
 28a:	10 e0       	ldi	r17, 0x00	; 0
				strip.setLED(j, 0, 0, 255, 31);
 28c:	0f 2e       	mov	r0, r31
 28e:	ff e1       	ldi	r31, 0x1F	; 31
 290:	ef 2e       	mov	r14, r31
 292:	f0 2d       	mov	r31, r0
 294:	0f ef       	ldi	r16, 0xFF	; 255
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	61 2f       	mov	r22, r17
 29c:	ce 01       	movw	r24, r28
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+1, 255, 0, 0, 31);
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	61 0f       	add	r22, r17
 2a8:	00 e0       	ldi	r16, 0x00	; 0
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	4f ef       	ldi	r20, 0xFF	; 255
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+2, 0, 255, 0, 31);
 2b6:	62 e0       	ldi	r22, 0x02	; 2
 2b8:	61 0f       	add	r22, r17
 2ba:	2f ef       	ldi	r18, 0xFF	; 255
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	ce 01       	movw	r24, r28
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+1, 0, 255, 0, 31);
				strip.setLED(j+2, 0, 0, 255, 31);
			}
			strip.refresh();
			_delay_ms(10);
			for (uint8_t j = 0; j < 16; j+=3) {
 2c6:	1d 5f       	subi	r17, 0xFD	; 253
 2c8:	12 31       	cpi	r17, 0x12	; 18
 2ca:	01 f7       	brne	.-64     	; 0x28c <main+0x14a>
				strip.setLED(j, 0, 0, 255, 31);
				strip.setLED(j+1, 255, 0, 0, 31);
				strip.setLED(j+2, 0, 255, 0, 31);
			}
			strip.refresh();
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	0e 94 66 00 	call	0xcc	; 0xcc <_ZN11APALEDStrip7refreshEv>
 2d4:	8f e3       	ldi	r24, 0x3F	; 63
 2d6:	9c e9       	ldi	r25, 0x9C	; 156
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x196>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x19c>
 2de:	00 00       	nop
			_delay_ms(10);
			for (uint8_t j = 0; j < 16; j+=3) {
 2e0:	10 e0       	ldi	r17, 0x00	; 0
				strip.setLED(j, 0, 255, 0, 31);
 2e2:	0f 2e       	mov	r0, r31
 2e4:	ff e1       	ldi	r31, 0x1F	; 31
 2e6:	ef 2e       	mov	r14, r31
 2e8:	f0 2d       	mov	r31, r0
 2ea:	00 e0       	ldi	r16, 0x00	; 0
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	61 2f       	mov	r22, r17
 2f2:	ce 01       	movw	r24, r28
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+1, 0, 0, 255, 31);
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	61 0f       	add	r22, r17
 2fe:	0f ef       	ldi	r16, 0xFF	; 255
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	ce 01       	movw	r24, r28
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+2, 255, 0, 0, 31);
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	61 0f       	add	r22, r17
 310:	00 e0       	ldi	r16, 0x00	; 0
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	4f ef       	ldi	r20, 0xFF	; 255
 316:	ce 01       	movw	r24, r28
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN11APALEDStrip6setLEDEhhhhh>
				strip.setLED(j+1, 255, 0, 0, 31);
				strip.setLED(j+2, 0, 255, 0, 31);
			}
			strip.refresh();
			_delay_ms(10);
			for (uint8_t j = 0; j < 16; j+=3) {
 31e:	1d 5f       	subi	r17, 0xFD	; 253
 320:	12 31       	cpi	r17, 0x12	; 18
 322:	f9 f6       	brne	.-66     	; 0x2e2 <main+0x1a0>
				strip.setLED(j, 0, 255, 0, 31);
				strip.setLED(j+1, 0, 0, 255, 31);
				strip.setLED(j+2, 255, 0, 0, 31);
			}
			strip.refresh();
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	0e 94 66 00 	call	0xcc	; 0xcc <_ZN11APALEDStrip7refreshEv>
 32c:	8f e3       	ldi	r24, 0x3F	; 63
 32e:	9c e9       	ldi	r25, 0x9C	; 156
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0x1ee>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x1f4>
 336:	00 00       	nop
 338:	fa 94       	dec	r15
			}
			strip.refresh();
			_delay_ms(20);
		}
		
		for(uint8_t i = 0; i < 7; i++) {
 33a:	f1 10       	cpse	r15, r1
 33c:	7b cf       	rjmp	.-266    	; 0x234 <main+0xf2>
 33e:	14 cf       	rjmp	.-472    	; 0x168 <main+0x26>

00000340 <_ZN3SPI7SPIinitEv>:

#include "SPI.h"

void SPI::SPIinit() {
	// Set MOSI, SCK, SS as Output
	DDRB |= (1 << PB5) | (1 << PB3) | (1 << PB2);
 340:	84 b1       	in	r24, 0x04	; 4
 342:	8c 62       	ori	r24, 0x2C	; 44
 344:	84 b9       	out	0x04, r24	; 4
	
	// Enable SPI, Set as Master, Prescaler: Fosc/16
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 346:	81 e5       	ldi	r24, 0x51	; 81
 348:	8c bd       	out	0x2c, r24	; 44
 34a:	08 95       	ret

0000034c <_ZN3SPI7SPIsendEh>:
}

void SPI::SPIsend(uint8_t data) {
	// Load data into the buffer
	SPDR = data;
 34c:	8e bd       	out	0x2e, r24	; 46
	
	// Wait until transmission complete
	while(!(SPSR & (1<<SPIF)));
 34e:	0d b4       	in	r0, 0x2d	; 45
 350:	07 fe       	sbrs	r0, 7
 352:	fd cf       	rjmp	.-6      	; 0x34e <_ZN3SPI7SPIsendEh+0x2>
 354:	08 95       	ret

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
